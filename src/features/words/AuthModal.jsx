import { useState } from "react";
import { useAuth } from "../../context/AuthContext";
import { loginUser as apiLogin, registerUser as apiRegister } from "../../features/auth/authAPI";

export default function AuthModal({ isOpen, onClose, onSuccess, error }) {
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({ username: "", password: "" });
  const [loading, setLoading] = useState(false);
  const [formError, setFormError] = useState("");
  const { login: authLogin } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    e.stopPropagation(); // üî• –î–û–ë–ê–í–ò–õ: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ
    
    setLoading(true);
    setFormError("");

    try {
      let response;
      if (isLogin) {
        response = await apiLogin(formData);
      } else {
        response = await apiRegister(formData);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      authLogin(response.data.token, response.data.user);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏ –≤—ã–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
      setFormData({ username: "", password: "" });
      onSuccess();
    } catch (err) {
      console.error("Auth error:", err);
      setFormError(err.response?.data?.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    } finally {
      setLoading(false);
    }
  };

  // üî• –î–û–ë–ê–í–ò–õ: –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–∞—Å–∞–Ω–∏–π
  const handleMobileSubmit = (e) => {
    e.preventDefault();
    e.stopPropagation();
    handleSubmit(e);
  };

  const handleChange = (e) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  const handleSwitchMode = () => {
    setIsLogin(!isLogin);
    setFormError("");
    setFormData({ username: "", password: "" });
  };

  // üî• –î–û–ë–ê–í–ò–õ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –æ–≤–µ—Ä–ª–µ—é
  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div 
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
      onClick={handleOverlayClick} // üî• –î–û–ë–ê–í–ò–õ: –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
    >
      <div className="bg-white rounded-2xl shadow-xl max-w-md w-full p-6 mx-2">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800">
            {isLogin ? "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É" : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}
          </h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors duration-200 w-10 h-10 flex items-center justify-center" // üî• –î–û–ë–ê–í–ò–õ: —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–∞—Å–∞–Ω–∏—è
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        {(error || formError) && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
            <p className="text-red-800 text-sm">{error || formError}</p>
          </div>
        )}

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2"> {/* üî• –ò–ó–ú–ï–ù–ò–õ: mb-1 ‚Üí mb-2 */}
              –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            </label>
            <input
              type="text" 
              name="username"
              value={formData.username}
              onChange={handleChange}
              required
              className="w-full px-4 py-3 text-base border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200" 
              // üî• –ò–ó–ú–ï–ù–ò–õ: py-2 ‚Üí py-3, –¥–æ–±–∞–≤–∏–ª text-base –¥–ª—è iOS
              placeholder="–í–∞—à–µ –∏–º—è" 
              minLength="2"
              autoComplete="username" // üî• –î–û–ë–ê–í–ò–õ: –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2"> {/* üî• –ò–ó–ú–ï–ù–ò–õ: mb-1 ‚Üí mb-2 */}
              –ü–∞—Ä–æ–ª—å
            </label>
            <input
              type="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              required
              className="w-full px-4 py-3 text-base border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200"
              // üî• –ò–ó–ú–ï–ù–ò–õ: py-2 ‚Üí py-3, –¥–æ–±–∞–≤–∏–ª text-base –¥–ª—è iOS
              placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              minLength="6"
              autoComplete={isLogin ? "current-password" : "new-password"} // üî• –î–û–ë–ê–í–ò–õ: –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            />
          </div>

          <button
  type="button" // üî• –ú–ï–ù–Ø–ï–ú –Ω–∞ type="button"
  onClick={(e) => {
    console.log('üì± CLICK DETECTED');
    e.preventDefault();
    e.stopPropagation();
    setTimeout(() => {
      handleSubmit(e);
    }, 50);
  }}
  onTouchStart={(e) => {
    console.log('üì± TOUCH DETECTED');
    e.preventDefault();
    e.stopPropagation();
    handleSubmit(e);
  }}
  onTouchEnd={(e) => {
    e.preventDefault();
    e.stopPropagation();
    setTimeout(() => {
      handleSubmit(e);
    }, 50);
  }}
  style={{
    minHeight: '50px',
    fontSize: '18px',
    WebkitTapHighlightColor: 'transparent'
  }}
  className="w-full bg-blue-600 text-white py-4 rounded-lg font-bold text-lg shadow-lg hover:bg-blue-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed border-0"
>
  {loading ? '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...' : (isLogin ? '–í–û–ô–¢–ò' : '–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–¢–¨–°–Ø')}
</button>
        </form>

        <div className="mt-6 pt-4 border-t border-gray-200"> {/* üî• –ò–ó–ú–ï–ù–ò–õ: –¥–æ–±–∞–≤–∏–ª –æ—Ç—Å—Ç—É–ø—ã –∏ –≥—Ä–∞–Ω–∏—Ü—É */}
          <button
            onClick={handleSwitchMode}
            onTouchEnd={(e) => {
              e.preventDefault();
              handleSwitchMode();
            }}
            className="w-full text-blue-600 hover:text-blue-800 transition-colors duration-200 text-sm font-medium py-2" 
            // üî• –î–û–ë–ê–í–ò–õ: w-full –∏ py-2 –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—Å–∞–Ω–∏—è
          >
            {isLogin ? "–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" : "–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏"}
          </button>
          <button
  onClick={() => alert('CLICK WORKING')}
  onTouchEnd={() => alert('TOUCH WORKING')}
  style={{ padding: '20px', background: 'red', color: 'white' }}
>
  –¢–ï–°–¢ –ö–ù–û–ü–ö–ò
</button>
        </div>
      </div>
    </div>
  );
}